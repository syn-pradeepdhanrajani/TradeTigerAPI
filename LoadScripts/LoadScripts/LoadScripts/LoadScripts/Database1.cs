

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "LoadScripts\App.config"
//     Connection String Name: "MyDbContext"
//     Connection String:      "data source=SYN-PF0SX4M0;initial catalog=Stocks;persist security info=True;user id=sa;password=**zapped**;;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Enterprise Edition
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.62
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace LoadScripts
{
    using System.Linq;

    // ************************************************************************
    // Unit of work
    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<JesseTradingMasterKey> JesseTradingMasterKeys { get; set; } // JesseTradingMasterKey
        System.Data.Entity.DbSet<JesseTradingMasterKeyPivot> JesseTradingMasterKeyPivots { get; set; } // JesseTradingMasterKeyPivot
        System.Data.Entity.DbSet<MarketData> MarketDatas { get; set; } // MarketData
        System.Data.Entity.DbSet<MarketExchange> MarketExchanges { get; set; } // MarketExchange
        System.Data.Entity.DbSet<Nifty> Nifties { get; set; } // NIFTY
        System.Data.Entity.DbSet<Script> Scripts { get; set; } // Script
        System.Data.Entity.DbSet<ScriptPrice> ScriptPrices { get; set; } // ScriptPrice
        System.Data.Entity.DbSet<ScriptPriceView> ScriptPriceViews { get; set; } // ScriptPriceView
        System.Data.Entity.DbSet<ScriptTracking> ScriptTrackings { get; set; } // ScriptTracking
        System.Data.Entity.DbSet<ScriptTrackingStatu> ScriptTrackingStatus { get; set; } // ScriptTrackingStatus
        System.Data.Entity.DbSet<ScriptTrackingView> ScriptTrackingViews { get; set; } // ScriptTrackingViews

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
    }

    // ************************************************************************
    // Database context
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<JesseTradingMasterKey> JesseTradingMasterKeys { get; set; } // JesseTradingMasterKey
        public System.Data.Entity.DbSet<JesseTradingMasterKeyPivot> JesseTradingMasterKeyPivots { get; set; } // JesseTradingMasterKeyPivot
        public System.Data.Entity.DbSet<MarketData> MarketDatas { get; set; } // MarketData
        public System.Data.Entity.DbSet<MarketExchange> MarketExchanges { get; set; } // MarketExchange
        public System.Data.Entity.DbSet<Nifty> Nifties { get; set; } // NIFTY
        public System.Data.Entity.DbSet<Script> Scripts { get; set; } // Script
        public System.Data.Entity.DbSet<ScriptPrice> ScriptPrices { get; set; } // ScriptPrice
        public System.Data.Entity.DbSet<ScriptPriceView> ScriptPriceViews { get; set; } // ScriptPriceView
        public System.Data.Entity.DbSet<ScriptTracking> ScriptTrackings { get; set; } // ScriptTracking
        public System.Data.Entity.DbSet<ScriptTrackingStatu> ScriptTrackingStatus { get; set; } // ScriptTrackingStatus
        public System.Data.Entity.DbSet<ScriptTrackingView> ScriptTrackingViews { get; set; } // ScriptTrackingViews
        
        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=MyDbContext")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new JesseTradingMasterKeyConfiguration());
            modelBuilder.Configurations.Add(new JesseTradingMasterKeyPivotConfiguration());
            modelBuilder.Configurations.Add(new MarketDataConfiguration());
            modelBuilder.Configurations.Add(new MarketExchangeConfiguration());
            modelBuilder.Configurations.Add(new NiftyConfiguration());
            modelBuilder.Configurations.Add(new ScriptConfiguration());
            modelBuilder.Configurations.Add(new ScriptPriceConfiguration());
            modelBuilder.Configurations.Add(new ScriptPriceViewConfiguration());
            modelBuilder.Configurations.Add(new ScriptTrackingConfiguration());
            modelBuilder.Configurations.Add(new ScriptTrackingStatuConfiguration());
            modelBuilder.Configurations.Add(new ScriptTrackingViewConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new JesseTradingMasterKeyConfiguration(schema));
            modelBuilder.Configurations.Add(new JesseTradingMasterKeyPivotConfiguration(schema));
            modelBuilder.Configurations.Add(new MarketDataConfiguration(schema));
            modelBuilder.Configurations.Add(new MarketExchangeConfiguration(schema));
            modelBuilder.Configurations.Add(new NiftyConfiguration(schema));
            modelBuilder.Configurations.Add(new ScriptConfiguration(schema));
            modelBuilder.Configurations.Add(new ScriptPriceConfiguration(schema));
            modelBuilder.Configurations.Add(new ScriptPriceViewConfiguration(schema));
            modelBuilder.Configurations.Add(new ScriptTrackingConfiguration(schema));
            modelBuilder.Configurations.Add(new ScriptTrackingStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new ScriptTrackingViewConfiguration(schema));
            return modelBuilder;
        }
    }

    // ************************************************************************
    // Fake Database context
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<JesseTradingMasterKey> JesseTradingMasterKeys { get; set; }
        public System.Data.Entity.DbSet<JesseTradingMasterKeyPivot> JesseTradingMasterKeyPivots { get; set; }
        public System.Data.Entity.DbSet<MarketData> MarketDatas { get; set; }
        public System.Data.Entity.DbSet<MarketExchange> MarketExchanges { get; set; }
        public System.Data.Entity.DbSet<Nifty> Nifties { get; set; }
        public System.Data.Entity.DbSet<Script> Scripts { get; set; }
        public System.Data.Entity.DbSet<ScriptPrice> ScriptPrices { get; set; }
        public System.Data.Entity.DbSet<ScriptPriceView> ScriptPriceViews { get; set; }
        public System.Data.Entity.DbSet<ScriptTracking> ScriptTrackings { get; set; }
        public System.Data.Entity.DbSet<ScriptTrackingStatu> ScriptTrackingStatus { get; set; }
        public System.Data.Entity.DbSet<ScriptTrackingView> ScriptTrackingViews { get; set; }

        public FakeMyDbContext()
        {
            JesseTradingMasterKeys = new FakeDbSet<JesseTradingMasterKey>("JesseTradingMasterKeyId");
            JesseTradingMasterKeyPivots = new FakeDbSet<JesseTradingMasterKeyPivot>("JesseTradingMasterKeyPivotId");
            MarketDatas = new FakeDbSet<MarketData>("StockId");
            MarketExchanges = new FakeDbSet<MarketExchange>("MarketExchangeId");
            Nifties = new FakeDbSet<Nifty>("StockId", "CreateDate");
            Scripts = new FakeDbSet<Script>("ScriptId");
            ScriptPrices = new FakeDbSet<ScriptPrice>("ScriptPriceId");
            ScriptPriceViews = new FakeDbSet<ScriptPriceView>("ScriptPriceId", "ScriptId", "ClosingPrice", "DayOpen", "DayHigh", "DayLow", "TradeDate", "IsWeeklyPrice", "IsMonthlyPrice", "IsQuarterlyPrice", "IsDailyPrice", "Expr1");
            ScriptTrackings = new FakeDbSet<ScriptTracking>("ScriptTrackingId");
            ScriptTrackingStatus = new FakeDbSet<ScriptTrackingStatu>("ScriptTrackingStatusId", "ScriptTrackingStatusDescription");
            ScriptTrackingViews = new FakeDbSet<ScriptTrackingView>("StockId");
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class 
    { 
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return System.Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return System.Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        System.Type IQueryable.ElementType
        { 
            get { return _query.ElementType; } 
        } 
 
        System.Linq.Expressions.Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }
    } 

    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(System.Linq.Expressions.Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression) 
            : base(expression) 
        { } 
 
        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> 
    { 
        private readonly System.Collections.Generic.IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // JesseTradingMasterKey
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class JesseTradingMasterKey
    {
        public int JesseTradingMasterKeyId { get; set; } // JesseTradingMasterKeyId (Primary key)
        public int ScriptId { get; set; } // ScriptId
        public System.DateTime TradeDate { get; set; } // TradeDate
        public double? SecondaryRallyPrice { get; set; } // SecondaryRallyPrice
        public double? NaturalRallyPrice { get; set; } // NaturalRallyPrice
        public double? UptrendPrice { get; set; } // UptrendPrice
        public double? DowntrendPrice { get; set; } // DowntrendPrice
        public double? NaturalReactionPrice { get; set; } // NaturalReactionPrice
        public double? SecondaryReactionPrice { get; set; } // SecondaryReactionPrice
        public bool? IsPivot { get; set; } // IsPivot
    }

    // JesseTradingMasterKeyPivot
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class JesseTradingMasterKeyPivot
    {
        public int JesseTradingMasterKeyPivotId { get; set; } // JesseTradingMasterKeyPivotId (Primary key)
        public int ScriptId { get; set; } // ScriptId
        public double? SecondaryRallyPrice { get; set; } // SecondaryRallyPrice
        public double? NaturalRallyPrice { get; set; } // NaturalRallyPrice
        public double? UptrendPrice { get; set; } // UptrendPrice
        public double? DowntrendPrice { get; set; } // DowntrendPrice
        public double? NaturalReactionPrice { get; set; } // NaturalReactionPrice
        public double? SecondaryReactionPrice { get; set; } // SecondaryReactionPrice
        public bool IsPivot { get; set; } // IsPivot
    }

    // MarketData
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MarketData
    {
        public int StockId { get; set; } // StockId
        public string Exchange { get; set; } // Exchange (length: 255)
        public string ScripName { get; set; } // Scrip Name (length: 255)
        public string C37Change { get; set; } // % Change (length: 255)
        public string Current { get; set; } // Current (length: 255)
        public string LastTradedQty { get; set; } // Last Traded Qty (length: 255)
        public string BidQty { get; set; } // Bid Qty (length: 255)
        public string BidPrice { get; set; } // Bid Price (length: 255)
        public string OfferPrice { get; set; } // Offer Price (length: 255)
        public string OfferQty { get; set; } // Offer Qty (length: 255)
        public string Open { get; set; } // Open (length: 255)
        public string High { get; set; } // High (length: 255)
        public string Low { get; set; } // Low (length: 255)
        public string Close { get; set; } // Close (length: 255)
        public string LastUpdatedTime { get; set; } // Last Updated Time (length: 255)
        public string LastTradedTime { get; set; } // Last Traded Time (length: 255)
        public string LastTradedDate { get; set; } // Last Traded Date (length: 255)
        public string Qty { get; set; } // Qty (length: 255)
        public string TotalBuyQty { get; set; } // Total Buy Qty (length: 255)
        public string ScripCode { get; set; } // Scrip Code (length: 255)
        public string TotalSellQty { get; set; } // Total Sell Qty (length: 255)
        public string OiDifference { get; set; } // OI Difference (length: 255)
        public string OiDifferencePercentage { get; set; } // OI Difference Percentage (length: 255)
        public string CompanyName { get; set; } // Company Name (length: 255)
        public string P35Open { get; set; } // P#Open (length: 255)
        public string P35High { get; set; } // P#High (length: 255)
        public string P35Low { get; set; } // P#Low (length: 255)
        public string P35Close { get; set; } // P#Close (length: 255)
        public string P35Quantity { get; set; } // P#Quantity (length: 255)
        public string PivotRes3 { get; set; } // Pivot Res 3 (length: 255)
        public string PivotRes2 { get; set; } // Pivot Res 2 (length: 255)
        public string PivotRes1 { get; set; } // Pivot Res 1 (length: 255)
        public string Pivot { get; set; } // Pivot (length: 255)
        public string PivotSup1 { get; set; } // Pivot Sup 1 (length: 255)
        public string PivotSup2 { get; set; } // Pivot Sup 2 (length: 255)
        public string PivotSup3 { get; set; } // Pivot Sup 3 (length: 255)
        public System.DateTime? CreateDate { get; set; } // CreateDate
    }

    // MarketExchange
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MarketExchange
    {
        public int MarketExchangeId { get; set; } // MarketExchangeId (Primary key)
        public string ExchangeCode { get; set; } // ExchangeCode (length: 50)
        public string ExchangeDescription { get; set; } // ExchangeDescription (length: 50)
        public string Exchange { get; set; } // Exchange (length: 50)
    }

    // NIFTY
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Nifty
    {
        public int StockId { get; set; } // StockId
        public string Exchange { get; set; } // Exchange (length: 255)
        public string ScripName { get; set; } // Scrip Name (length: 255)
        public string C37Change { get; set; } // % Change (length: 255)
        public string Current { get; set; } // Current (length: 255)
        public string LastTradedQty { get; set; } // Last Traded Qty (length: 255)
        public string BidQty { get; set; } // Bid Qty (length: 255)
        public string BidPrice { get; set; } // Bid Price (length: 255)
        public string OfferPrice { get; set; } // Offer Price (length: 255)
        public string OfferQty { get; set; } // Offer Qty (length: 255)
        public string Open { get; set; } // Open (length: 255)
        public string High { get; set; } // High (length: 255)
        public string Low { get; set; } // Low (length: 255)
        public string Close { get; set; } // Close (length: 255)
        public string LastUpdatedTime { get; set; } // Last Updated Time (length: 255)
        public string LastTradedTime { get; set; } // Last Traded Time (length: 255)
        public string LastTradedDate { get; set; } // Last Traded Date (length: 255)
        public string Qty { get; set; } // Qty (length: 255)
        public string TotalBuyQty { get; set; } // Total Buy Qty (length: 255)
        public string ScripCode { get; set; } // Scrip Code (length: 255)
        public string TotalSellQty { get; set; } // Total Sell Qty (length: 255)
        public string OiDifference { get; set; } // OI Difference (length: 255)
        public string OiDifferencePercentage { get; set; } // OI Difference Percentage (length: 255)
        public string CompanyName { get; set; } // Company Name (length: 255)
        public string P35Open { get; set; } // P#Open (length: 255)
        public string P35High { get; set; } // P#High (length: 255)
        public string P35Low { get; set; } // P#Low (length: 255)
        public string P35Close { get; set; } // P#Close (length: 255)
        public string P35Quantity { get; set; } // P#Quantity (length: 255)
        public string PivotRes3 { get; set; } // Pivot Res 3 (length: 255)
        public string PivotRes2 { get; set; } // Pivot Res 2 (length: 255)
        public string PivotRes1 { get; set; } // Pivot Res 1 (length: 255)
        public string Pivot { get; set; } // Pivot (length: 255)
        public string PivotSup1 { get; set; } // Pivot Sup 1 (length: 255)
        public string PivotSup2 { get; set; } // Pivot Sup 2 (length: 255)
        public string PivotSup3 { get; set; } // Pivot Sup 3 (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate
        
        public Nifty()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // Script
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Script
    {
        public int ScriptId { get; set; } // ScriptId (Primary key)
        public string ScriptCode { get; set; } // ScriptCode (length: 255)
        public string ScriptName { get; set; } // ScriptName (length: 500)
        public string CompanyName { get; set; } // CompanyName (length: 500)
        public int ScriptMarketExchangeId { get; set; } // ScriptMarketExchangeId
        public bool Active { get; set; } // Active
        
        public Script()
        {
            Active = true;
        }
    }

    // ScriptPrice
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ScriptPrice
    {
        public int ScriptPriceId { get; set; } // ScriptPriceId (Primary key)
        public int ScriptId { get; set; } // ScriptId
        public double ClosingPrice { get; set; } // ClosingPrice
        public double DayOpen { get; set; } // DayOpen
        public double DayHigh { get; set; } // DayHigh
        public double DayLow { get; set; } // DayLow
        public System.DateTime TradeDate { get; set; } // TradeDate
        public decimal? DayVolume { get; set; } // DayVolume
        public double? OpenInterestPercentage { get; set; } // OpenInterestPercentage
        public decimal? OpenInterestDifference { get; set; } // OpenInterestDifference
        public bool IsWeeklyPrice { get; set; } // IsWeeklyPrice
        public bool IsMonthlyPrice { get; set; } // IsMonthlyPrice
        public bool IsQuarterlyPrice { get; set; } // IsQuarterlyPrice
        public bool IsDailyPrice { get; set; } // IsDailyPrice
        
        public ScriptPrice()
        {
            IsWeeklyPrice = false;
            IsMonthlyPrice = false;
            IsQuarterlyPrice = false;
            IsDailyPrice = false;
        }
    }

    // ScriptPriceView
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ScriptPriceView
    {
        public int ScriptPriceId { get; set; } // ScriptPriceId
        public int ScriptId { get; set; } // ScriptId
        public double ClosingPrice { get; set; } // ClosingPrice
        public double DayOpen { get; set; } // DayOpen
        public double DayHigh { get; set; } // DayHigh
        public double DayLow { get; set; } // DayLow
        public System.DateTime TradeDate { get; set; } // TradeDate
        public decimal? DayVolume { get; set; } // DayVolume
        public double? OpenInterestPercentage { get; set; } // OpenInterestPercentage
        public decimal? OpenInterestDifference { get; set; } // OpenInterestDifference
        public bool IsWeeklyPrice { get; set; } // IsWeeklyPrice
        public bool IsMonthlyPrice { get; set; } // IsMonthlyPrice
        public bool IsQuarterlyPrice { get; set; } // IsQuarterlyPrice
        public bool IsDailyPrice { get; set; } // IsDailyPrice
        public int Expr1 { get; set; } // Expr1
    }

    // ScriptTracking
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ScriptTracking
    {
        public int ScriptTrackingId { get; set; } // ScriptTrackingId (Primary key)
        public int ScriptId { get; set; } // ScriptId
        public int ScriptTrackingStatus { get; set; } // ScriptTrackingStatus
        public bool IsWeeklyTrackingStatus { get; set; } // IsWeeklyTrackingStatus
        public bool IsMonthlyTrackingStatus { get; set; } // IsMonthlyTrackingStatus
        public bool IsQuarterlyTrackingStatus { get; set; } // IsQuarterlyTrackingStatus
        public bool IsDailyTrackingStatus { get; set; } // IsDailyTrackingStatus
        public bool IsOpenLowSamePrice { get; set; } // IsOpenLowSamePrice
        public bool IsOpenHighSamePrice { get; set; } // IsOpenHighSamePrice
        public System.DateTime TradeDate { get; set; } // TradeDate
        public double? ClosingPrice { get; set; } // ClosingPrice
        public string TrackingDetails { get; set; } // TrackingDetails
        
        public ScriptTracking()
        {
            IsWeeklyTrackingStatus = false;
            IsMonthlyTrackingStatus = false;
            IsQuarterlyTrackingStatus = false;
            IsDailyTrackingStatus = false;
            IsOpenLowSamePrice = false;
            IsOpenHighSamePrice = false;
        }
    }

    // ScriptTrackingStatus
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ScriptTrackingStatu
    {
        public int ScriptTrackingStatusId { get; set; } // ScriptTrackingStatusId
        public string ScriptTrackingStatusDescription { get; set; } // ScriptTrackingStatusDescription (length: 50)
    }

    // ScriptTrackingViews
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ScriptTrackingView
    {
        public int StockId { get; set; } // StockId
        public string Exchange { get; set; } // Exchange (length: 255)
        public string ScripName { get; set; } // Scrip Name (length: 255)
        public string C37Change { get; set; } // % Change (length: 255)
        public string Current { get; set; } // Current (length: 255)
        public string LastTradedQty { get; set; } // Last Traded Qty (length: 255)
        public string BidQty { get; set; } // Bid Qty (length: 255)
        public string BidPrice { get; set; } // Bid Price (length: 255)
        public string OfferPrice { get; set; } // Offer Price (length: 255)
        public string OfferQty { get; set; } // Offer Qty (length: 255)
        public string Open { get; set; } // Open (length: 255)
        public string High { get; set; } // High (length: 255)
        public string Low { get; set; } // Low (length: 255)
        public string Close { get; set; } // Close (length: 255)
        public string LastUpdatedTime { get; set; } // Last Updated Time (length: 255)
        public string LastTradedTime { get; set; } // Last Traded Time (length: 255)
        public string LastTradedDate { get; set; } // Last Traded Date (length: 255)
        public string Qty { get; set; } // Qty (length: 255)
        public string TotalBuyQty { get; set; } // Total Buy Qty (length: 255)
        public string ScripCode { get; set; } // Scrip Code (length: 255)
        public string TotalSellQty { get; set; } // Total Sell Qty (length: 255)
        public string OiDifference { get; set; } // OI Difference (length: 255)
        public string OiDifferencePercentage { get; set; } // OI Difference Percentage (length: 255)
        public string CompanyName { get; set; } // Company Name (length: 255)
        public string P35Open { get; set; } // P#Open (length: 255)
        public string P35High { get; set; } // P#High (length: 255)
        public string P35Low { get; set; } // P#Low (length: 255)
        public string P35Close { get; set; } // P#Close (length: 255)
        public string P35Quantity { get; set; } // P#Quantity (length: 255)
        public string PivotRes3 { get; set; } // Pivot Res 3 (length: 255)
        public string PivotRes2 { get; set; } // Pivot Res 2 (length: 255)
        public string PivotRes1 { get; set; } // Pivot Res 1 (length: 255)
        public string Pivot { get; set; } // Pivot (length: 255)
        public string PivotSup1 { get; set; } // Pivot Sup 1 (length: 255)
        public string PivotSup2 { get; set; } // Pivot Sup 2 (length: 255)
        public string PivotSup3 { get; set; } // Pivot Sup 3 (length: 255)
        public System.DateTime? CreateDate { get; set; } // CreateDate
    }


    // ************************************************************************
    // POCO Configuration

    // JesseTradingMasterKey
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class JesseTradingMasterKeyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<JesseTradingMasterKey>
    {
        public JesseTradingMasterKeyConfiguration()
            : this("dbo")
        {
        }
 
        public JesseTradingMasterKeyConfiguration(string schema)
        {
            ToTable(schema + ".JesseTradingMasterKey");
            HasKey(x => x.JesseTradingMasterKeyId);

            Property(x => x.JesseTradingMasterKeyId).HasColumnName(@"JesseTradingMasterKeyId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ScriptId).HasColumnName(@"ScriptId").IsRequired().HasColumnType("int");
            Property(x => x.TradeDate).HasColumnName(@"TradeDate").IsRequired().HasColumnType("date");
            Property(x => x.SecondaryRallyPrice).HasColumnName(@"SecondaryRallyPrice").IsOptional().HasColumnType("float");
            Property(x => x.NaturalRallyPrice).HasColumnName(@"NaturalRallyPrice").IsOptional().HasColumnType("float");
            Property(x => x.UptrendPrice).HasColumnName(@"UptrendPrice").IsOptional().HasColumnType("float");
            Property(x => x.DowntrendPrice).HasColumnName(@"DowntrendPrice").IsOptional().HasColumnType("float");
            Property(x => x.NaturalReactionPrice).HasColumnName(@"NaturalReactionPrice").IsOptional().HasColumnType("float");
            Property(x => x.SecondaryReactionPrice).HasColumnName(@"SecondaryReactionPrice").IsOptional().HasColumnType("float");
            Property(x => x.IsPivot).HasColumnName(@"IsPivot").IsOptional().HasColumnType("bit");
        }
    }

    // JesseTradingMasterKeyPivot
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class JesseTradingMasterKeyPivotConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<JesseTradingMasterKeyPivot>
    {
        public JesseTradingMasterKeyPivotConfiguration()
            : this("dbo")
        {
        }
 
        public JesseTradingMasterKeyPivotConfiguration(string schema)
        {
            ToTable(schema + ".JesseTradingMasterKeyPivot");
            HasKey(x => x.JesseTradingMasterKeyPivotId);

            Property(x => x.JesseTradingMasterKeyPivotId).HasColumnName(@"JesseTradingMasterKeyPivotId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ScriptId).HasColumnName(@"ScriptId").IsRequired().HasColumnType("int");
            Property(x => x.SecondaryRallyPrice).HasColumnName(@"SecondaryRallyPrice").IsOptional().HasColumnType("float");
            Property(x => x.NaturalRallyPrice).HasColumnName(@"NaturalRallyPrice").IsOptional().HasColumnType("float");
            Property(x => x.UptrendPrice).HasColumnName(@"UptrendPrice").IsOptional().HasColumnType("float");
            Property(x => x.DowntrendPrice).HasColumnName(@"DowntrendPrice").IsOptional().HasColumnType("float");
            Property(x => x.NaturalReactionPrice).HasColumnName(@"NaturalReactionPrice").IsOptional().HasColumnType("float");
            Property(x => x.SecondaryReactionPrice).HasColumnName(@"SecondaryReactionPrice").IsOptional().HasColumnType("float");
            Property(x => x.IsPivot).HasColumnName(@"IsPivot").IsRequired().HasColumnType("bit");
        }
    }

    // MarketData
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MarketDataConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MarketData>
    {
        public MarketDataConfiguration()
            : this("dbo")
        {
        }
 
        public MarketDataConfiguration(string schema)
        {
            ToTable(schema + ".MarketData");
            HasKey(x => x.StockId);

            Property(x => x.StockId).HasColumnName(@"StockId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Exchange).HasColumnName(@"Exchange").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.ScripName).HasColumnName(@"Scrip Name").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.C37Change).HasColumnName(@"% Change").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Current).HasColumnName(@"Current").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastTradedQty).HasColumnName(@"Last Traded Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.BidQty).HasColumnName(@"Bid Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.BidPrice).HasColumnName(@"Bid Price").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OfferPrice).HasColumnName(@"Offer Price").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OfferQty).HasColumnName(@"Offer Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Open).HasColumnName(@"Open").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.High).HasColumnName(@"High").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Low).HasColumnName(@"Low").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Close).HasColumnName(@"Close").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastUpdatedTime).HasColumnName(@"Last Updated Time").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastTradedTime).HasColumnName(@"Last Traded Time").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastTradedDate).HasColumnName(@"Last Traded Date").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Qty).HasColumnName(@"Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.TotalBuyQty).HasColumnName(@"Total Buy Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.ScripCode).HasColumnName(@"Scrip Code").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.TotalSellQty).HasColumnName(@"Total Sell Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OiDifference).HasColumnName(@"OI Difference").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OiDifferencePercentage).HasColumnName(@"OI Difference Percentage").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.CompanyName).HasColumnName(@"Company Name").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Open).HasColumnName(@"P#Open").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35High).HasColumnName(@"P#High").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Low).HasColumnName(@"P#Low").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Close).HasColumnName(@"P#Close").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Quantity).HasColumnName(@"P#Quantity").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotRes3).HasColumnName(@"Pivot Res 3").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotRes2).HasColumnName(@"Pivot Res 2").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotRes1).HasColumnName(@"Pivot Res 1").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Pivot).HasColumnName(@"Pivot").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotSup1).HasColumnName(@"Pivot Sup 1").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotSup2).HasColumnName(@"Pivot Sup 2").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotSup3).HasColumnName(@"Pivot Sup 3").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").IsOptional().HasColumnType("date");
        }
    }

    // MarketExchange
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MarketExchangeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MarketExchange>
    {
        public MarketExchangeConfiguration()
            : this("dbo")
        {
        }
 
        public MarketExchangeConfiguration(string schema)
        {
            ToTable(schema + ".MarketExchange");
            HasKey(x => x.MarketExchangeId);

            Property(x => x.MarketExchangeId).HasColumnName(@"MarketExchangeId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ExchangeCode).HasColumnName(@"ExchangeCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ExchangeDescription).HasColumnName(@"ExchangeDescription").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Exchange).HasColumnName(@"Exchange").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
        }
    }

    // NIFTY
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class NiftyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Nifty>
    {
        public NiftyConfiguration()
            : this("dbo")
        {
        }
 
        public NiftyConfiguration(string schema)
        {
            ToTable(schema + ".NIFTY");
            HasKey(x => new { x.StockId, x.CreateDate });

            Property(x => x.StockId).HasColumnName(@"StockId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Exchange).HasColumnName(@"Exchange").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.ScripName).HasColumnName(@"Scrip Name").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.C37Change).HasColumnName(@"% Change").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Current).HasColumnName(@"Current").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastTradedQty).HasColumnName(@"Last Traded Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.BidQty).HasColumnName(@"Bid Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.BidPrice).HasColumnName(@"Bid Price").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OfferPrice).HasColumnName(@"Offer Price").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OfferQty).HasColumnName(@"Offer Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Open).HasColumnName(@"Open").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.High).HasColumnName(@"High").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Low).HasColumnName(@"Low").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Close).HasColumnName(@"Close").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastUpdatedTime).HasColumnName(@"Last Updated Time").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastTradedTime).HasColumnName(@"Last Traded Time").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastTradedDate).HasColumnName(@"Last Traded Date").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Qty).HasColumnName(@"Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.TotalBuyQty).HasColumnName(@"Total Buy Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.ScripCode).HasColumnName(@"Scrip Code").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.TotalSellQty).HasColumnName(@"Total Sell Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OiDifference).HasColumnName(@"OI Difference").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OiDifferencePercentage).HasColumnName(@"OI Difference Percentage").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.CompanyName).HasColumnName(@"Company Name").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Open).HasColumnName(@"P#Open").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35High).HasColumnName(@"P#High").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Low).HasColumnName(@"P#Low").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Close).HasColumnName(@"P#Close").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Quantity).HasColumnName(@"P#Quantity").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotRes3).HasColumnName(@"Pivot Res 3").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotRes2).HasColumnName(@"Pivot Res 2").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotRes1).HasColumnName(@"Pivot Res 1").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Pivot).HasColumnName(@"Pivot").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotSup1).HasColumnName(@"Pivot Sup 1").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotSup2).HasColumnName(@"Pivot Sup 2").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotSup3).HasColumnName(@"Pivot Sup 3").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").IsRequired().HasColumnType("date");
        }
    }

    // Script
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ScriptConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Script>
    {
        public ScriptConfiguration()
            : this("dbo")
        {
        }
 
        public ScriptConfiguration(string schema)
        {
            ToTable(schema + ".Script");
            HasKey(x => x.ScriptId);

            Property(x => x.ScriptId).HasColumnName(@"ScriptId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ScriptCode).HasColumnName(@"ScriptCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.ScriptName).HasColumnName(@"ScriptName").IsOptional().HasColumnType("nvarchar").HasMaxLength(500);
            Property(x => x.CompanyName).HasColumnName(@"CompanyName").IsOptional().HasColumnType("nvarchar").HasMaxLength(500);
            Property(x => x.ScriptMarketExchangeId).HasColumnName(@"ScriptMarketExchangeId").IsRequired().HasColumnType("int");
            Property(x => x.Active).HasColumnName(@"Active").IsRequired().HasColumnType("bit");
        }
    }

    // ScriptPrice
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ScriptPriceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ScriptPrice>
    {
        public ScriptPriceConfiguration()
            : this("dbo")
        {
        }
 
        public ScriptPriceConfiguration(string schema)
        {
            ToTable(schema + ".ScriptPrice");
            HasKey(x => x.ScriptPriceId);

            Property(x => x.ScriptPriceId).HasColumnName(@"ScriptPriceId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ScriptId).HasColumnName(@"ScriptId").IsRequired().HasColumnType("int");
            Property(x => x.ClosingPrice).HasColumnName(@"ClosingPrice").IsRequired().HasColumnType("float");
            Property(x => x.DayOpen).HasColumnName(@"DayOpen").IsRequired().HasColumnType("float");
            Property(x => x.DayHigh).HasColumnName(@"DayHigh").IsRequired().HasColumnType("float");
            Property(x => x.DayLow).HasColumnName(@"DayLow").IsRequired().HasColumnType("float");
            Property(x => x.TradeDate).HasColumnName(@"TradeDate").IsRequired().HasColumnType("date");
            Property(x => x.DayVolume).HasColumnName(@"DayVolume").IsOptional().HasColumnType("numeric");
            Property(x => x.OpenInterestPercentage).HasColumnName(@"OpenInterestPercentage").IsOptional().HasColumnType("float");
            Property(x => x.OpenInterestDifference).HasColumnName(@"OpenInterestDifference").IsOptional().HasColumnType("numeric");
            Property(x => x.IsWeeklyPrice).HasColumnName(@"IsWeeklyPrice").IsRequired().HasColumnType("bit");
            Property(x => x.IsMonthlyPrice).HasColumnName(@"IsMonthlyPrice").IsRequired().HasColumnType("bit");
            Property(x => x.IsQuarterlyPrice).HasColumnName(@"IsQuarterlyPrice").IsRequired().HasColumnType("bit");
            Property(x => x.IsDailyPrice).HasColumnName(@"IsDailyPrice").IsRequired().HasColumnType("bit");
        }
    }

    // ScriptPriceView
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ScriptPriceViewConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ScriptPriceView>
    {
        public ScriptPriceViewConfiguration()
            : this("dbo")
        {
        }
 
        public ScriptPriceViewConfiguration(string schema)
        {
            ToTable(schema + ".ScriptPriceView");
            HasKey(x => new { x.ScriptPriceId, x.ScriptId, x.ClosingPrice, x.DayOpen, x.DayHigh, x.DayLow, x.TradeDate, x.IsWeeklyPrice, x.IsMonthlyPrice, x.IsQuarterlyPrice, x.IsDailyPrice, x.Expr1 });

            Property(x => x.ScriptPriceId).HasColumnName(@"ScriptPriceId").IsRequired().HasColumnType("int");
            Property(x => x.ScriptId).HasColumnName(@"ScriptId").IsRequired().HasColumnType("int");
            Property(x => x.ClosingPrice).HasColumnName(@"ClosingPrice").IsRequired().HasColumnType("float");
            Property(x => x.DayOpen).HasColumnName(@"DayOpen").IsRequired().HasColumnType("float");
            Property(x => x.DayHigh).HasColumnName(@"DayHigh").IsRequired().HasColumnType("float");
            Property(x => x.DayLow).HasColumnName(@"DayLow").IsRequired().HasColumnType("float");
            Property(x => x.TradeDate).HasColumnName(@"TradeDate").IsRequired().HasColumnType("date");
            Property(x => x.DayVolume).HasColumnName(@"DayVolume").IsOptional().HasColumnType("numeric");
            Property(x => x.OpenInterestPercentage).HasColumnName(@"OpenInterestPercentage").IsOptional().HasColumnType("float");
            Property(x => x.OpenInterestDifference).HasColumnName(@"OpenInterestDifference").IsOptional().HasColumnType("numeric");
            Property(x => x.IsWeeklyPrice).HasColumnName(@"IsWeeklyPrice").IsRequired().HasColumnType("bit");
            Property(x => x.IsMonthlyPrice).HasColumnName(@"IsMonthlyPrice").IsRequired().HasColumnType("bit");
            Property(x => x.IsQuarterlyPrice).HasColumnName(@"IsQuarterlyPrice").IsRequired().HasColumnType("bit");
            Property(x => x.IsDailyPrice).HasColumnName(@"IsDailyPrice").IsRequired().HasColumnType("bit");
            Property(x => x.Expr1).HasColumnName(@"Expr1").IsRequired().HasColumnType("int");
        }
    }

    // ScriptTracking
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ScriptTrackingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ScriptTracking>
    {
        public ScriptTrackingConfiguration()
            : this("dbo")
        {
        }
 
        public ScriptTrackingConfiguration(string schema)
        {
            ToTable(schema + ".ScriptTracking");
            HasKey(x => x.ScriptTrackingId);

            Property(x => x.ScriptTrackingId).HasColumnName(@"ScriptTrackingId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ScriptId).HasColumnName(@"ScriptId").IsRequired().HasColumnType("int");
            Property(x => x.ScriptTrackingStatus).HasColumnName(@"ScriptTrackingStatus").IsRequired().HasColumnType("int");
            Property(x => x.IsWeeklyTrackingStatus).HasColumnName(@"IsWeeklyTrackingStatus").IsRequired().HasColumnType("bit");
            Property(x => x.IsMonthlyTrackingStatus).HasColumnName(@"IsMonthlyTrackingStatus").IsRequired().HasColumnType("bit");
            Property(x => x.IsQuarterlyTrackingStatus).HasColumnName(@"IsQuarterlyTrackingStatus").IsRequired().HasColumnType("bit");
            Property(x => x.IsDailyTrackingStatus).HasColumnName(@"IsDailyTrackingStatus").IsRequired().HasColumnType("bit");
            Property(x => x.IsOpenLowSamePrice).HasColumnName(@"IsOpenLowSamePrice").IsRequired().HasColumnType("bit");
            Property(x => x.IsOpenHighSamePrice).HasColumnName(@"IsOpenHighSamePrice").IsRequired().HasColumnType("bit");
            Property(x => x.TradeDate).HasColumnName(@"TradeDate").IsRequired().HasColumnType("date");
            Property(x => x.ClosingPrice).HasColumnName(@"ClosingPrice").IsOptional().HasColumnType("float");
            Property(x => x.TrackingDetails).HasColumnName(@"TrackingDetails").IsOptional().HasColumnType("nvarchar");
        }
    }

    // ScriptTrackingStatus
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ScriptTrackingStatuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ScriptTrackingStatu>
    {
        public ScriptTrackingStatuConfiguration()
            : this("dbo")
        {
        }
 
        public ScriptTrackingStatuConfiguration(string schema)
        {
            ToTable(schema + ".ScriptTrackingStatus");
            HasKey(x => new { x.ScriptTrackingStatusId, x.ScriptTrackingStatusDescription });

            Property(x => x.ScriptTrackingStatusId).HasColumnName(@"ScriptTrackingStatusId").IsRequired().HasColumnType("int");
            Property(x => x.ScriptTrackingStatusDescription).HasColumnName(@"ScriptTrackingStatusDescription").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
        }
    }

    // ScriptTrackingViews
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ScriptTrackingViewConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ScriptTrackingView>
    {
        public ScriptTrackingViewConfiguration()
            : this("dbo")
        {
        }
 
        public ScriptTrackingViewConfiguration(string schema)
        {
            ToTable(schema + ".ScriptTrackingViews");
            HasKey(x => x.StockId);

            Property(x => x.StockId).HasColumnName(@"StockId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Exchange).HasColumnName(@"Exchange").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.ScripName).HasColumnName(@"Scrip Name").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.C37Change).HasColumnName(@"% Change").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Current).HasColumnName(@"Current").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastTradedQty).HasColumnName(@"Last Traded Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.BidQty).HasColumnName(@"Bid Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.BidPrice).HasColumnName(@"Bid Price").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OfferPrice).HasColumnName(@"Offer Price").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OfferQty).HasColumnName(@"Offer Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Open).HasColumnName(@"Open").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.High).HasColumnName(@"High").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Low).HasColumnName(@"Low").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Close).HasColumnName(@"Close").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastUpdatedTime).HasColumnName(@"Last Updated Time").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastTradedTime).HasColumnName(@"Last Traded Time").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastTradedDate).HasColumnName(@"Last Traded Date").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Qty).HasColumnName(@"Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.TotalBuyQty).HasColumnName(@"Total Buy Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.ScripCode).HasColumnName(@"Scrip Code").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.TotalSellQty).HasColumnName(@"Total Sell Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OiDifference).HasColumnName(@"OI Difference").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OiDifferencePercentage).HasColumnName(@"OI Difference Percentage").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.CompanyName).HasColumnName(@"Company Name").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Open).HasColumnName(@"P#Open").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35High).HasColumnName(@"P#High").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Low).HasColumnName(@"P#Low").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Close).HasColumnName(@"P#Close").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Quantity).HasColumnName(@"P#Quantity").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotRes3).HasColumnName(@"Pivot Res 3").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotRes2).HasColumnName(@"Pivot Res 2").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotRes1).HasColumnName(@"Pivot Res 1").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Pivot).HasColumnName(@"Pivot").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotSup1).HasColumnName(@"Pivot Sup 1").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotSup2).HasColumnName(@"Pivot Sup 2").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotSup3).HasColumnName(@"Pivot Sup 3").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").IsOptional().HasColumnType("date");
        }
    }

}
// </auto-generated>

