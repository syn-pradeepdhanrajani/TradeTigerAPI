

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "ClassLibrary2\App.config"
//     Connection String Name: "MyDbContext"
//     Connection String:      "data source=SYNHNJL-151\SQLSERVER2014;initial catalog=Stocks;persist security info=True;user id=sa;password=**zapped**;;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Enterprise Edition
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace ClassLibrary2
{
    using System.Linq;

    // ************************************************************************
    // Unit of work
    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Nifty> Nifties { get; set; } // NIFTY

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
    }

    // ************************************************************************
    // Database context
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<Nifty> Nifties { get; set; } // NIFTY
        
        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=MyDbContext")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new NiftyConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new NiftyConfiguration(schema));
            return modelBuilder;
        }
    }

    // ************************************************************************
    // Fake Database context
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<Nifty> Nifties { get; set; }

        public FakeMyDbContext()
        {
            Nifties = new FakeDbSet<Nifty>("StockId", "CreateDate");
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class 
    { 
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return System.Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return System.Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        System.Type IQueryable.ElementType
        { 
            get { return _query.ElementType; } 
        } 
 
        System.Linq.Expressions.Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }
    } 

    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(System.Linq.Expressions.Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression) 
            : base(expression) 
        { } 
 
        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> 
    { 
        private readonly System.Collections.Generic.IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // NIFTY
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Nifty
    {
        public int StockId { get; set; } // StockId
        public string Exchange { get; set; } // Exchange (length: 255)
        public string ScripName { get; set; } // Scrip Name (length: 255)
        public string C37Change { get; set; } // % Change (length: 255)
        public string Current { get; set; } // Current (length: 255)
        public string LastTradedQty { get; set; } // Last Traded Qty (length: 255)
        public string BidQty { get; set; } // Bid Qty (length: 255)
        public string BidPrice { get; set; } // Bid Price (length: 255)
        public string OfferPrice { get; set; } // Offer Price (length: 255)
        public string OfferQty { get; set; } // Offer Qty (length: 255)
        public string Open { get; set; } // Open (length: 255)
        public string High { get; set; } // High (length: 255)
        public string Low { get; set; } // Low (length: 255)
        public string Close { get; set; } // Close (length: 255)
        public string LastUpdatedTime { get; set; } // Last Updated Time (length: 255)
        public string LastTradedTime { get; set; } // Last Traded Time (length: 255)
        public string LastTradedDate { get; set; } // Last Traded Date (length: 255)
        public string Qty { get; set; } // Qty (length: 255)
        public string TotalBuyQty { get; set; } // Total Buy Qty (length: 255)
        public string ScripCode { get; set; } // Scrip Code (length: 255)
        public string TotalSellQty { get; set; } // Total Sell Qty (length: 255)
        public string OiDifference { get; set; } // OI Difference (length: 255)
        public string OiDifferencePercentage { get; set; } // OI Difference Percentage (length: 255)
        public string CompanyName { get; set; } // Company Name (length: 255)
        public string P35Open { get; set; } // P#Open (length: 255)
        public string P35High { get; set; } // P#High (length: 255)
        public string P35Low { get; set; } // P#Low (length: 255)
        public string P35Close { get; set; } // P#Close (length: 255)
        public string P35Quantity { get; set; } // P#Quantity (length: 255)
        public string PivotRes3 { get; set; } // Pivot Res 3 (length: 255)
        public string PivotRes2 { get; set; } // Pivot Res 2 (length: 255)
        public string PivotRes1 { get; set; } // Pivot Res 1 (length: 255)
        public string Pivot { get; set; } // Pivot (length: 255)
        public string PivotSup1 { get; set; } // Pivot Sup 1 (length: 255)
        public string PivotSup2 { get; set; } // Pivot Sup 2 (length: 255)
        public string PivotSup3 { get; set; } // Pivot Sup 3 (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate
        
        public Nifty()
        {
            CreateDate = System.DateTime.Now;
        }
    }


    // ************************************************************************
    // POCO Configuration

    // NIFTY
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class NiftyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Nifty>
    {
        public NiftyConfiguration()
            : this("dbo")
        {
        }
 
        public NiftyConfiguration(string schema)
        {
            ToTable(schema + ".NIFTY");
            HasKey(x => new { x.StockId, x.CreateDate });

            Property(x => x.StockId).HasColumnName(@"StockId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Exchange).HasColumnName(@"Exchange").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.ScripName).HasColumnName(@"Scrip Name").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.C37Change).HasColumnName(@"% Change").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Current).HasColumnName(@"Current").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastTradedQty).HasColumnName(@"Last Traded Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.BidQty).HasColumnName(@"Bid Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.BidPrice).HasColumnName(@"Bid Price").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OfferPrice).HasColumnName(@"Offer Price").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OfferQty).HasColumnName(@"Offer Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Open).HasColumnName(@"Open").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.High).HasColumnName(@"High").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Low).HasColumnName(@"Low").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Close).HasColumnName(@"Close").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastUpdatedTime).HasColumnName(@"Last Updated Time").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastTradedTime).HasColumnName(@"Last Traded Time").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.LastTradedDate).HasColumnName(@"Last Traded Date").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Qty).HasColumnName(@"Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.TotalBuyQty).HasColumnName(@"Total Buy Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.ScripCode).HasColumnName(@"Scrip Code").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.TotalSellQty).HasColumnName(@"Total Sell Qty").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OiDifference).HasColumnName(@"OI Difference").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.OiDifferencePercentage).HasColumnName(@"OI Difference Percentage").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.CompanyName).HasColumnName(@"Company Name").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Open).HasColumnName(@"P#Open").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35High).HasColumnName(@"P#High").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Low).HasColumnName(@"P#Low").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Close).HasColumnName(@"P#Close").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.P35Quantity).HasColumnName(@"P#Quantity").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotRes3).HasColumnName(@"Pivot Res 3").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotRes2).HasColumnName(@"Pivot Res 2").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotRes1).HasColumnName(@"Pivot Res 1").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.Pivot).HasColumnName(@"Pivot").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotSup1).HasColumnName(@"Pivot Sup 1").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotSup2).HasColumnName(@"Pivot Sup 2").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.PivotSup3).HasColumnName(@"Pivot Sup 3").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").IsRequired().HasColumnType("date");
        }
    }

}
// </auto-generated>

